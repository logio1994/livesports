import tkinter as tk
from tkinter import messagebox
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import pandas as pd
import os
import time
import threading
import queue

# Lista do przechowywania wynik√≥w (globalnie)
match_data = []

# Konfiguracja opcji przeglƒÖdarki Chrome
chrome_options = webdriver.ChromeOptions()
# Dodanie linii wy≈ÇƒÖczajƒÖcych ≈Çadowanie obraz√≥w ‚Äì przyspiesza dzia≈Çanie strony
prefs = {"profile.managed_default_content_settings.images": 2}
chrome_options.add_experimental_option("prefs", prefs)

def get_team_names(driver):
    try:
        # Pobranie nazwy dru≈ºyny gospodarza (pierwszy element o klasie 'ls')
        home_team = driver.find_element(By.XPATH, "//span[@class='ls']").text.strip()
        print(f"üè† Gospodarz: {home_team}")

        # Pobranie nazwy dru≈ºyny go≈õcia (drugi element o klasie 'ls')
        away_team = driver.find_elements(By.XPATH, "//span[@class='ls']")[1].text.strip()
        print(f"üöÄ Go≈õƒá: {away_team}")

        return home_team, away_team
    except Exception as e:
        print(f"‚ö†Ô∏è B≈ÇƒÖd podczas pobierania dru≈ºyn: {e}")
        return None, None

def accept_cookies(driver):
    try:
        cookies_btn = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'onetrust-accept-btn-handler'))
        )
        cookies_btn.click()
        print("‚úÖ Ciasteczka zaakceptowane")
    except Exception as e:
        print("‚ö†Ô∏è Brak okna cookies ‚Äì przechodzƒô dalej")

def open_table_tab(driver):
    try:
        table_link = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'table'))
        )
        driver.execute_script("arguments[0].click();", table_link)
        print("üìä Klikniƒôto w zak≈Çadkƒô Tabela")
    except Exception as e:
        print(f"‚ö†Ô∏è B≈ÇƒÖd podczas klikania w Tabela: {e}")

def get_home_stats(driver, home_team):
    try:
        # Kliknij w zak≈Çadkƒô Home
        home_tab = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'home__tab'))
        )
        driver.execute_script("arguments[0].click();", home_tab)
        print(f"üè† Klikniƒôto zak≈Çadkƒô Home dla dru≈ºyny {home_team}")
        # Poczekaj a≈º URL zawiera parametr tab=table-home
        WebDriverWait(driver, 5).until(lambda d: "tab=table-home" in d.current_url)

        # XPath do statystyk gospodarza
        xpath_played = f"//td[@class='Ff' and contains(@data-testid, '{home_team}__league-column__played')]"
        WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.XPATH, xpath_played)))
        matches_played = driver.find_element(By.XPATH, xpath_played).text.strip()

        xpath_goalsFor = f"//td[@class='Ff' and contains(@data-testid, '{home_team}__league-column__goalsFor')]"
        goals_scored = driver.find_element(By.XPATH, xpath_goalsFor).text.strip()

        xpath_goalsAgainst = f"//td[@class='Ff' and contains(@data-testid, '{home_team}__league-column__goalsAgainst')]"
        goals_against = driver.find_element(By.XPATH, xpath_goalsAgainst).text.strip()

        print(f"üè† {home_team} - Mecze: {matches_played}, Bramki strzelone: {goals_scored}, Bramki stracone: {goals_against}")
        return matches_played, goals_scored, goals_against

    except Exception as e:
        print(f"‚ö†Ô∏è B≈ÇƒÖd podczas pobierania statystyk dla gospodarza {home_team}: {e}")
        return "B≈ÇƒÖd", "B≈ÇƒÖd", "B≈ÇƒÖd"

def get_away_stats(driver, away_team):
    try:
        # Kliknij w zak≈Çadkƒô Away
        away_tab = WebDriverWait(driver, 5).until(
            EC.element_to_be_clickable((By.ID, 'away__tab'))
        )
        driver.execute_script("arguments[0].click();", away_tab)
        print(f"üöÄ Klikniƒôto zak≈Çadkƒô Away dla dru≈ºyny {away_team}")
        # Poczekaj a≈º URL zawiera parametr tab=table-away
        WebDriverWait(driver, 5).until(lambda d: "tab=table-away" in d.current_url)

        # XPath do statystyk go≈õcia
        xpath_played = f"//td[@class='Ff' and contains(@data-testid, '{away_team}__league-column__played')]"
        WebDriverWait(driver, 5).until(EC.visibility_of_element_located((By.XPATH, xpath_played)))
        matches_played = driver.find_element(By.XPATH, xpath_played).text.strip()

        xpath_goalsFor = f"//td[@class='Ff' and contains(@data-testid, '{away_team}__league-column__goalsFor')]"
        goals_scored = driver.find_element(By.XPATH, xpath_goalsFor).text.strip()

        xpath_goalsAgainst = f"//td[@class='Ff' and contains(@data-testid, '{away_team}__league-column__goalsAgainst')]"
        goals_against = driver.find_element(By.XPATH, xpath_goalsAgainst).text.strip()

        print(f"üöÄ {away_team} - Mecze: {matches_played}, Bramki strzelone: {goals_scored}, Bramki stracone: {goals_against}")
        return matches_played, goals_scored, goals_against

    except Exception as e:
        print(f"‚ö†Ô∏è B≈ÇƒÖd podczas pobierania statystyk dla go≈õcia {away_team}: {e}")
        return "B≈ÇƒÖd", "B≈ÇƒÖd", "B≈ÇƒÖd"

def save_to_excel(data):
    desktop_path = os.path.join(os.path.expanduser("~"), "Desktop")
    file_path = os.path.join(desktop_path, "dane_meczu.xlsx")
    df = pd.DataFrame(data, columns=["Dru≈ºyna", "Mecze", "Bramki Strzelone", "Bramki Stracone"])
    df.to_excel(file_path, index=False)
    print(f"üìä Dane zapisane do pliku: {file_path}")

def cookies_watcher(driver):
    while True:
        try:
            cookie_button = driver.find_element(By.ID, 'onetrust-accept-btn-handler')
            if cookie_button.is_displayed():
                cookie_button.click()
                print("üõ°Ô∏è Watcher: Cookies zaakceptowane.")
                time.sleep(1)
        except:
            pass
        time.sleep(2)


def process_link(index, link, result_queue):
    driver = webdriver.Chrome(options=chrome_options)
    print(f"üîó Przetwarzanie linku nr {index + 1}: {link}")
    driver.get(link)

    # Uruchamiamy w tle "watchera" od ciasteczek
    threading.Thread(target=cookies_watcher, args=(driver,), daemon=True).start()

    accept_cookies(driver)  # Zostawiamy te≈º wstƒôpne sprawdzenie

    home_team, away_team = get_team_names(driver)
    result = []
    if home_team and away_team:
        open_table_tab(driver)
        home_stats = get_home_stats(driver, home_team)
        away_stats = get_away_stats(driver, away_team)
        result = [
            [home_team, home_stats[0], home_stats[1], home_stats[2]],
            [away_team, away_stats[0], away_stats[1], away_stats[2]]
        ]
    driver.quit()
    result_queue.put((index, result))
    print(f"‚úÖ Link nr {index + 1} przetworzony.")


def process_links():
    links = text_box.get("1.0", "end-1c").strip().splitlines()
    if not links:
        messagebox.showwarning("B≈ÇƒÖd", "Proszƒô wprowadziƒá przynajmniej jeden link!")
        return

    result_queue = queue.Queue()
    threads = []
    max_threads = 3

    # Uruchom wƒÖtki dla ka≈ºdego linku, ale jednocze≈õnie nie wiƒôcej ni≈º max_threads
    for index, link in enumerate(links):
        t = threading.Thread(target=process_link, args=(index, link, result_queue))
        threads.append(t)
        t.start()
        # Je≈õli osiƒÖgniemy limit jednoczesnych wƒÖtk√≥w, czekamy na ich zako≈Ñczenie
        if len(threads) >= max_threads:
            for th in threads:
                th.join()
            threads = []

    # Do≈ÇƒÖcz pozosta≈Çe wƒÖtki
    for t in threads:
        t.join()

    # Zbieramy wyniki z kolejki i sortujemy po indeksie
    results = []
    while not result_queue.empty():
        results.append(result_queue.get())
    results.sort(key=lambda x: x[0])

    # ≈ÅƒÖczymy wyniki (ka≈ºdy link generuje dwie linie)
    match_data.clear()
    for idx, data in results:
        match_data.extend(data)

    save_to_excel(match_data)

# Tworzenie okna GUI
root = tk.Tk()
root.title("Wprowad≈∫ Linki")

label = tk.Label(root, text="Wklej linki (ka≈ºdy w nowej linii):")
label.pack(pady=10)

text_box = tk.Text(root, height=10, width=50)
text_box.pack(pady=10)

process_button = tk.Button(root, text="Przetw√≥rz linki", command=process_links)
process_button.pack(pady=20)

root.mainloop()
